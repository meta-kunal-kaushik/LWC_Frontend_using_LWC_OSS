"use strict";
exports.__esModule = true;
/* eslint-disable no-prototype-builtins */
var path_1 = require("path");
var module_resolver_1 = require("./module-resolver");
var fs_1 = require("fs");
var fs_2 = require("fs");
function transformModuleRecordsToIncludes(modulesConfig) {
    var modules = [];
    var pkgJson = JSON.parse(fs_1.readFileSync(path_1.resolve(process.cwd(), 'package.json'), 'utf8'));
    if (pkgJson.modules && pkgJson.modules.length) {
        modules = pkgJson.modules;
    }
    if (fs_2.existsSync(path_1.resolve(process.cwd(), 'lwc.config.json'))) {
        var lwcConfig = JSON.parse(fs_1.readFileSync(path_1.resolve(process.cwd(), 'lwc.config.json'), 'utf8'));
        if (lwcConfig.modules && lwcConfig.modules.length) {
            modules = lwcConfig.modules;
        }
    }
    if (modulesConfig && modulesConfig.length) {
        modules = modulesConfig;
    }
    var records = [];
    for (var _i = 0, modules_1 = modules; _i < modules_1.length; _i++) {
        var module_1 = modules_1[_i];
        if (module_1.hasOwnProperty('npm')) {
            records.push(path_1.resolve(process.cwd(), 'node_modules', module_1.npm));
        }
        else if (module_1.hasOwnProperty('dir')) {
            records.push(path_1.resolve(process.cwd(), module_1.dir));
        }
        else if (module_1.hasOwnProperty('alias')) {
            records.push(path_1.resolve(process.cwd(), module_1.path));
        }
    }
    return records;
}
var EXTENSIONS = ['.js', '.ts'];
module.exports = /** @class */ (function () {
    function Plugin(config) {
        this.config = config;
    }
    Plugin.prototype.apply = function (compiler) {
        var _a;
        var _b = (this.config || {}).modules, modules = _b === void 0 ? [] : _b;
        compiler.hooks.environment.tap('lwc-webpack-plugin', function () {
            var resolverPlugin = new module_resolver_1.LwcModuleResolverPlugin(modules);
            compiler.options.resolve.plugins = [resolverPlugin];
            compiler.options.resolveLoader.plugins = [resolverPlugin];
            var rules = compiler.options.module.rules;
            if (rules === undefined) {
                rules = compiler.options.module.rules = [];
            }
        });
        var alias = compiler.options.resolve.alias;
        if (alias === undefined) {
            alias = compiler.options.resolve.alias = {};
        }
        // Specify known package aliases
        alias.lwc = path_1.resolve('./node_modules/@lwc/engine');
        alias['wire-service'] = path_1.resolve('./node_modules/@lwc/wire-service');
        if (compiler.options.resolve.extensions) {
            (_a = compiler.options.resolve.extensions).push.apply(_a, EXTENSIONS);
        }
        else {
            compiler.options.resolve.extensions = EXTENSIONS;
        }
        compiler.options.module.rules.push({
            test: /\.(js|ts|html|css)$/,
            include: transformModuleRecordsToIncludes(modules),
            use: {
                loader: require.resolve('./loader')
            }
        });
    };
    return Plugin;
}());
