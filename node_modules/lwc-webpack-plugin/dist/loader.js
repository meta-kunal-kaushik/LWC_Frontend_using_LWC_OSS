var compiler = require('@lwc/compiler');
var babel = require('@babel/core');
var getInfoFromPath = require('./module').getInfoFromPath;
module.exports = function (source) {
    var resourcePath = this.resourcePath;
    var info;
    try {
        info = getInfoFromPath(resourcePath, process.cwd());
    }
    catch (e) {
        info = {
            name: '',
            namespace: ''
        };
    }
    var codeTransformed = source;
    if (resourcePath.endsWith('.ts')) {
        var code = babel.transform(source, {
            filename: resourcePath,
            plugins: [
                require.resolve('@babel/plugin-syntax-class-properties'),
                [
                    require.resolve('@babel/plugin-syntax-decorators'),
                    {
                        decoratorsBeforeExport: true
                    }
                ]
            ],
            presets: [require.resolve('@babel/preset-typescript')]
        }).code;
        codeTransformed = code;
    }
    var cb = this.async();
    compiler
        .transform(codeTransformed, resourcePath, {
        name: info.ns,
        namespace: 'my'
    })
        .then(function (res) {
        cb(null, res.code);
    })["catch"](function (err) {
        cb(err);
    });
    return;
};
